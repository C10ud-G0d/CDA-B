Libraries are resources that contain code and/or data. Libraries are referenced by new programs via a process known as linking. Libraries are linked statically or dynamically.
Static linking copies all the referenced portions of the library into the resulting program image, while dynamic linking references the library instead of copying the library.

Libraries shared by multiple applications might exist in a specific shared library, like an installation in C:\Program Files\ or by convention by the library provider. 


Dynamic libraries are used to achieve an attacker’s goal, including:
 
  Persistence
  Privilege Escalation
  Defense Evasion

The following techniques are used to accomplish one or more of the above tactics:


T1546.10: Event Triggered Execution: 
  AppInit DLLsCauses a library to be loaded any time an application that references User32.dll is executed, which encompasses most applications — allowing persistence.         
  DllMain entries are used to execute code under that application’s context, which potentially allows for privilege escalation.

T1055.001: Process Injection: DLL Injection
  DLL Injection: Attach to another process, then load a specified library — triggering the execution of code under that process’s context. 
  This allows for privilege escalation and some amount of defense evasion.

T1574.002: Hijack Execution Flow: DLL Side-Loading
  DLL Side-Loading: Application manifest files describe the version of a library that is loaded. 
                    If this manifest is vague or imprecise, an attacker can exploit this weakness to load a malicious library instead of the intended library. 
                    This allows an attacker to gain persistence by hijacking a common process, some defense evasion by its nature of executing under a trusted process, and a potential for privilege escalation if the process has elevated permissions.

T1574.001: Hijack Execution Flow: DLL Search Order Hijacking
    Hijack Execution Flow: DLL Load Order attack takes advantage of weaknesses in some applications and the order of paths those libraries are loaded from. 
                           An attacker creates a malicious DLL that replaces a DLL expected by the application and executes code under the context of that application, allowing the attacker to potentially become persistent, escalate privileges, or evade defenses.

T1574.006: Hijack Execution Flow: LD_PRELOADLD_PRELOAD: A shared library attack for Linux that allows an attacker to override which library loads when a process loads a specific library by setting the LD_PRELOAD environment variable 

  
  DETECTION 

T1546.010: AppInit DLLRegistry entries, such as HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Windows\LoadAppInit_DLLsMalicious library in the path it is loaded from

T1055.001: DLL InjectionMalicious library or libraries used during the attack Loaded by processes

T1574.002: DLL Side-LoadingMalicious library or libraries used during the attack in C:\Windows\WinSXS folderLibrary manifests in C:\Windows\WinSXS folder

T1547.004: DLL Load OrderMalicious library in a search path

T1574.006: LD_PRELOADMalicious library used during the attackPersistent environmental variable change to the LD_PRELOAD variable



** (Get-Process explorer).Modules ** - Allows you to view all Modules and their binary paths asociated with explorer
