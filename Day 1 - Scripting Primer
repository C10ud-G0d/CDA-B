Scripting as a Force Multiplier
  Analysts use scripts to help extend their capabilities during the execution of missions. 
  Usage of scripts during missions can include automating deployments, performing action execution on ranges of devices at the same time, gathering or parsing information from machines, etc.

Adversary Usage of Scripting
  Attackers make use of scripting for various purposes, such as deploying malware, collecting and exfiltrating data, and establishing interactive sessions on compromised systems.

Scripting Languages Used in This Course
  
  Windows batch files
    Windows batch file format is usable on all modern versions of Windows. However, the features offered by batch files can be a bit limited and awkward from a modern scripting perspective. 
    Generally, batch files are used for legacy reasons or for simple tasks, although batch files are fairly common as logon scripts. 
    Simple tasks may be easier to perform or deploy from batch files, however as the complexity of the script grows, the more complicated it can be to create these scripts as batch files.
  
  PowerShell
    PowerShell is a .NET-based, cross-platform scripting solution that has native support for remote execution and is deployed by default on modern versions of Windows, and versions of which are deployable on Unix-like platforms. 
    In addition, its usage can be managed via Group Policy on Windows domains. 
    It contains many features that enable richer scripts, such as full support for object-oriented programming, creation of new cmdlets — small commands or scripts written for PowerShell, which typically return a .NET object for further display or manipulation — for reusable scripting functionality, and many built-in cmdlets for commonly used functions.  
 
  Bash
    Bash scripting is typically used on Unix-like systems, such as Linux, MacOS, Berkeley Software Distribution (BSD), etc. 
    In addition, Bash can be deployed to Windows systems through Windows Subsystem for Linux (WSL), Cygwin, or other similar tools. 
    While often seen as limited, this method of scripting is available on any system using the Bash shell, and after years of experience, it is used fairly often for system maintenance. 
    Z Shell (ZSH) and other shells on Unix-like systems often have fairly similar scripting environments that may be mostly compatible with Bash scripts.

  Python
    Python is a programming language often use in scripting. 
    It is cross-platform, and often installed on Unix-like operating systems as well as being deployed on Windows workstations and servers where it is a dependency. 
    Python is well-supported by programming tools that support multiple languages, and has a rich package system available with pip. 

Execution History
  Bash’s history file is present at <userhome>/.bash_history by default, and PowerShell — since 5.0 — has a default location at %APPDATA%\Microsoft\Windows\PowerShell\PSReadLine\ConsoleHost_history.txt.

  PowerShell’s default location can be changed using the Set-PSReadLineOption cmdlet's -HistorySavePath option, and the location can be displayed using Get-PSReadLineOption.

Conceptualizing a Script
  When creating or prototyping a new script, there are many methods for determining the best path forward, however these methods generally boil down to:

    State the problem clearly. This step is vital to ensure that the correct solution is sought out.

    Determine a big picture solution to the problem.

    Break the solution down into individual steps that can be performed. If unable to do so, reconsider the solution or research as necessary.

    Determine how to perform each step in the target language, adjusting overall flow or structure as required based upon feedback here. 
    For steps with many or complex parts, this may require following this process starting back at the beginning for that particular step.

    Test and deploy the script.

    Clean up and/or revise as necessary.

Input/Output
  When creating a script, it is often necessary to take in input or output data. 
  The syntax and methods can vary greatly depending on the scripting language, however these are common input sources and output destinations:

    Console: The console can often be read from or written to.

    File: Scripting languages can often read from or write to files.

    Registry: Scripting languages on Windows may be able to read or write to the registry. This may require the use of external binaries.

    Databases: Some scripting languages support reading or writing to or from databases, or external binaries may be usable to perform the same operations

    Command Line Arguments: Many scripting languages allow command line arguments to be read, and command line arguments can be supplied to other scripts or applications.

    Network: Scripting languages — either natively or through invoking of external code — can allow a script to connect to other machines via networking to send or receive data. 
             This can take the form of Hypertext Transfer Protocol (HTTP) requests, Transmission Control Protocol (TCP) connections, or other lower-level connections. 
             This is useful for downloading software to deploy — legitimate or malicious.

  
