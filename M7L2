FILE HASHING 

  During the course of duties, situations occur that require the hashing of files — such as comparing artifacts against databases or compiling information for reports. 
  In addition, intelligence briefings often include hashes of known artifacts associated with a particular malware; validating their presence is part of the analyst’s responsibilities. 
  PowerShell hashes files or other artifacts natively via the Get-FileHash cmdlet.

  The Get-FileHash cmdlet uses these arguments:
    Algorithm: Hashing algorithm to use, such as Message Digest 5 (MD5), Secure Hashing Algorithm 1 (SHA1), or Secure Hashing Algorithm 256 (SHA256)
    Path: Path to the file to be hashed; accepts wildcards to evaluate multiple files or an array of strings

  The first unnamed parameter is inferred to be the Path argument (e.g., Get-FileHash example.txt).

.NET Encoding Classes

  Red teams and blue teams alike benefit from using various encoding methods, such as Base64 encoding, to perform their tasks. 
  Red teams use Base64 encoding to bypass executable detection, filters, etc., or to download or upload executable binaries or other artifacts via text-only channels. 
  Blue teams use Base64 encoding to deliver artifacts for review via text-only channels.

  In addition to Base64 encoding, .NET contains classes for converting between various text-encoding types, such as American Standard Code for Information Interchange (ASCII), Unicode Transformation Format – 8-bit (UTF-8), etc. 
  While many modern text editors support converting between these text encodings, often this is handled via PowerShell.

  Use the [Convert]::ToBase64String and [Convert]::FromBase64String methods with one parameter for each (in these examples):

  [Convert]::ToBase64String(byte[]) 
    byte[]: Byte array (binary data) converted to a Base64 string
    return type: String containing the Base64 encoded data
  
  [Convert]::FromBase64String(string) 
    string: String converted to a byte array (binary data) 
    return type: Byte[] containing the converted data


PSPROVIDERS
  
Get-Item: Retrieves an object containing information about a particular item supplied by a PSProvider; uses the following parameter:
  Path: Location of the item; accepts wild cards, and inferred as the first unnamed parameter (e.g., Get-Item C:\Windows\System32\Hosts)

Get-ChildItem: Lists all items in a specified or current directory; uses the following parameter:
  Path: Location of the directory to be enumerated; inferred from the first unnamed parameter (e.g., Get-ChildItem C:\Windows\System32)

New-Item: Creates a new entry in the specified location; uses the following parameters:
  Path: Location of the item to be created (i.e., directory/folder/drive)
  Name: Name of the item to be created
  Value: Initial value of the new item

Move-Item: Moves an item to a specified location; uses the following parameters:
  Path: Location of the file to be moved; inferred from the first unnamed parameter 
  Destination: Destination filename; inferred from the second unnamed parameter

Set-Item: Replaces the contents of a specified item with a new value; uses the following parameters:Path: 
  Path of the item to have its value changed
  Value: New item value

Remove-Item: Deletes the specified item; uses the following parameter:Path: 
  Path of the item to be removed; inferred from the first unnamed parameter 

Rename-Item: Renames a specified item; uses the following parameters:Path: 
  Path of the item to be renamed; inferred from the first unnamed parameter 
  NewName: New item name

New-PSDrive: Maps a new PowerShell Drive (PSDrive) — used to simplify paths; uses the following parameters:
  Name: New drive name; addressable via Name:
  PSProvider: PSProvider that the PSDrive operates underRoot: 
  Root path that the PSDrive operates under

Get-PSProvider: Displays all available PSProviders

INTERACTING REMOTELY USING POWERSHELL


Get-Credential: Stores credentials after prompting for them; used with commands that require them, such as Invoke-Command or New-PSSession

Invoke-Command: Runs a code block or script file on the local or a specified remote machine; uses the following parameters:
  Credential: Created via Get-Credential; used to connect to the remote computer
  ComputerName: Name of the computer to run commands on; accepts multiple computer names; must be resolvable via Domain Name System (DNS) or other name lookup
  ScriptBlock: Block of code to be runFilePath: 
  File containing the script to be run
  Session: Session to invoke a command on (exclusive with ComputerName)

New-PSSession (PowerShell Session): Creates a reusable session with the remote computer(s), variables, etc. on the remote session to be saved for the duration of the session.
  Credential: Created via Get-Credential; used to connect to the remote computer
  ComputerName: Name of the computer to run commands on; accepts multiple computer names; must be resolvable via DNS or other name lookup

Invoke-WebRequest: Useful for interacting with web servers. For this lesson, used to download files via the PowerShell terminal.URI 
  (Uniform Resource Identifier): Location of the file to be downloaded, e.g. http://speedtest.tele2.net/10MB.zipMegabyte (MB)
  OutFile: File to be written
  Credential: Created by Get-Credential, used to authenticate with the remote server for this request

Start-BitsTransfer: Uses Background Intelligent Transfer Service (BITS) on Windows environments to download a file
  Source: Location of the file to be downloaded, e.g. http://speedtest.tele2.net/10MB.zip
  Destination: File to be written
  Credential: Created by Get-Credential, used to authenticate with the remote server for this request
  Asynchronous: Specifies whether or not a file is downloaded interactively

Get-BitsTransfer: Lists active download jobs for BITS



